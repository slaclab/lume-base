{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"lume-base Python base class and common utilities for LUME wrappers Installing lume-base Installing lume-base from the conda-forge channel can be achieved by adding conda-forge to your channels with: conda config --add channels conda-forge Once the conda-forge channel has been enabled, lume-base can be installed with: conda install lume-base It is possible to list all of the versions of lume-base available on your platform with: conda search lume-base --channel conda-forge","title":"Home"},{"location":"#lume-base","text":"Python base class and common utilities for LUME wrappers","title":"lume-base"},{"location":"#installing-lume-base","text":"Installing lume-base from the conda-forge channel can be achieved by adding conda-forge to your channels with: conda config --add channels conda-forge Once the conda-forge channel has been enabled, lume-base can be installed with: conda install lume-base It is possible to list all of the versions of lume-base available on your platform with: conda search lume-base --channel conda-forge","title":"Installing lume-base"},{"location":"architecture/","text":"Architecture This package was developed with the goal of avoid repeating boilerplate code and establish a common interface for LUME compatible codes. The following interfaces are available: lume.base.Base lume.base.CommandWrapper The Base class is to be inherited by wrappers which are pure Python and do not invoke an external command. If you would like to provide a LUME compatible interface for a code which wraps an external program, please use the CommandWrapper described below. Base The LUME Base class provides many useful methods which can be examined on the API section of this documentation. The following are abstract methods which must be implemented by you when inheriting from Base : configure : Configure and set up for run. run : Execute the code. Command Wrapper The LUME CommandWrapper extends the Base class and provides the following abstract methods, in addition to the ones provided by the Base class , which must be implemented by you: archive : Dump inputs and outputs into HDF5 file. load_archive : Loads input and output from archived h5 file. plot : Plots output multiple keys. write_input : Write the input parameters into the file. input_parser : Invoke the specialized input parser and returns the input dictionary. load_output : Reads and load into .output the outputs generated by the code. Next Steps The following sections will describe in detail the available interfaces as well as their properties.","title":"Architecture"},{"location":"architecture/#architecture","text":"This package was developed with the goal of avoid repeating boilerplate code and establish a common interface for LUME compatible codes. The following interfaces are available: lume.base.Base lume.base.CommandWrapper The Base class is to be inherited by wrappers which are pure Python and do not invoke an external command. If you would like to provide a LUME compatible interface for a code which wraps an external program, please use the CommandWrapper described below.","title":"Architecture"},{"location":"architecture/#base","text":"The LUME Base class provides many useful methods which can be examined on the API section of this documentation. The following are abstract methods which must be implemented by you when inheriting from Base : configure : Configure and set up for run. run : Execute the code.","title":"Base"},{"location":"architecture/#command-wrapper","text":"The LUME CommandWrapper extends the Base class and provides the following abstract methods, in addition to the ones provided by the Base class , which must be implemented by you: archive : Dump inputs and outputs into HDF5 file. load_archive : Loads input and output from archived h5 file. plot : Plots output multiple keys. write_input : Write the input parameters into the file. input_parser : Invoke the specialized input parser and returns the input dictionary. load_output : Reads and load into .output the outputs generated by the code.","title":"Command Wrapper"},{"location":"architecture/#next-steps","text":"The following sections will describe in detail the available interfaces as well as their properties.","title":"Next Steps"},{"location":"api/base/","text":"lume.base.Base ( ABC ) Base Interface for LUME-compatible code. Parameters: Name Type Description Default input_file str The input file to be used, by default None None initial_particles dict Initial Particle metadata to be used, by default None None verbose bool Whether or not to produce verbose output, by default False False timeout float The timeout in seconds to be used, by default None None Source code in lume/base.py class Base ( ABC ): \"\"\" Base Interface for LUME-compatible code. Parameters ---------- input_file : str, optional The input file to be used, by default None initial_particles : dict, optional Initial Particle metadata to be used, by default None verbose : bool, optional Whether or not to produce verbose output, by default False timeout : float, optional The timeout in seconds to be used, by default None \"\"\" def __init__ ( self , input_file = None , * , initial_particles = None , verbose = False , timeout = None , ** kwargs ): self . _input_file = input_file self . _initial_particles = initial_particles self . _input = None self . _output = None # Execution self . _timeout = timeout # Logging self . _verbose = verbose # State self . _configured = False self . _finished = False self . _error = False @property def input ( self ): \"\"\" Input data as a dictionary \"\"\" return self . _input @input . setter def input ( self , input ): self . _input = input @property def output ( self ): \"\"\" require openPMD standard, in the future we can add more methods for libs such as pandas Dataframes, xarray DataArrays and Dask Arrays. \"\"\" return self . _output @output . setter def output ( self , output ): self . _output = output @property def initial_particles ( self ): \"\"\" Initial Particles \"\"\" return self . _initial_particles @initial_particles . setter def initial_particles ( self , initial_particles ): self . _initial_particles = initial_particles @abstractmethod def configure ( self ): \"\"\" Configure and set up for run. \"\"\" raise NotImplementedError @abstractmethod def run ( self ): \"\"\" Execute the code. \"\"\" raise NotImplementedError @property def verbose ( self ): \"\"\" Read or configure the verbose flag. \"\"\" return self . _verbose @verbose . setter def verbose ( self , verbose ): self . _verbose = verbose @property def timeout ( self ): \"\"\" Read or configure the timeout in seconds. \"\"\" return self . _timeout @timeout . setter def timeout ( self , timeout ): self . _timeout = timeout @property def configured ( self ): \"\"\" Get or set the configured flag state. \"\"\" return self . _configured @configured . setter def configured ( self , configured ): self . _configured = configured @property def finished ( self ): \"\"\" Get or set the finished flag state. \"\"\" return self . _finished @finished . setter def finished ( self , finished ): self . _finished = finished @property def error ( self ): \"\"\" Get or set the error flag state. \"\"\" return self . _error @error . setter def error ( self , error ): self . _error = error @property def input_file ( self ): \"\"\" Get or set the input file to be processed. \"\"\" return self . _input_file @input_file . setter def input_file ( self , input_file ): \"\"\"dictionary with parameters?\"\"\" self . _input_file = input_file def fingerprint ( self ): \"\"\" Data fingerprint (hash) using the input parameters. Returns ------- fingerprint : str The hash for this object based on the input parameters. \"\"\" return tools . fingerprint ( self . input ) def copy ( self ): \"\"\" Returns a deep copy of this object. If a tempdir is being used, will clear this and deconfigure. \"\"\" other = copy . deepcopy ( self ) other . reset () return other def reset ( self ): \"\"\" Reset this object to its initial state. \"\"\" pass def vprint ( self , * args , ** kwargs ): # Verbose print if self . _verbose : print ( * args , ** kwargs ) @classmethod def from_yaml ( cls , yaml_file ): \"\"\" Returns an Impact object instantiated from a YAML config file Will load intial_particles from an h5 file. \"\"\" # Try file if os . path . exists ( tools . full_path ( yaml_file )): yaml_file = tools . full_path ( yaml_file ) config = yaml . safe_load ( open ( yaml_file )) # The input file might be relative to the yaml file if 'input_file' in config : f = os . path . expandvars ( config [ 'input_file' ]) if not os . path . isabs ( f ): # Get the yaml file root root , _ = os . path . split ( tools . full_path ( yaml_file )) config [ 'input_file' ] = os . path . join ( root , f ) else : # Try raw string config = yaml . safe_load ( yaml_file ) # Form ParticleGroup from file if 'initial_particles' in config : f = config [ 'initial_particles' ] if not os . path . isabs ( f ): root , _ = os . path . split ( tools . full_path ( yaml_file )) f = os . path . join ( root , f ) config [ 'initial_particles' ] = ParticleGroup ( f ) return cls ( ** config ) def to_hdf5 ( self , filename : str ) -> None : \"\"\"Serialize an object to an hdf5 file. Parameters ---------- filename: str \"\"\" serializer = HDF5Serializer () serializer . serialize ( filename , self ) @classmethod def from_hdf5 ( cls , filename : str ) -> \"Base\" : \"\"\"Load an object from and hdf5. Parameters ---------- filename: str \"\"\" serializer = HDF5Serializer () return serializer . deserialize ( filename ) @abstractmethod def archive ( self , h5 = None ): \"\"\" Dump inputs and outputs into HDF5 file. Parameters ---------- h5 : str or h5py.File The filename or handle to HDF5 file in which to write the information. If not in informed, a new file is generated. Returns ------- h5 : h5py.File Handle to the HDF5 file. \"\"\" raise NotImplementedError @abstractmethod def load_archive ( self , h5 , configure = True ): \"\"\" Loads input and output from archived h5 file. Parameters ---------- h5 : str or h5py.File The filename or handle on h5py.File from which to load input and output data configure : bool, optional Whether or not to invoke the configure method after loading, by default True \"\"\" raise NotImplementedError configured property writable Get or set the configured flag state. error property writable Get or set the error flag state. finished property writable Get or set the finished flag state. initial_particles property writable Initial Particles input property writable Input data as a dictionary input_file property writable Get or set the input file to be processed. output property writable require openPMD standard, in the future we can add more methods for libs such as pandas Dataframes, xarray DataArrays and Dask Arrays. timeout property writable Read or configure the timeout in seconds. verbose property writable Read or configure the verbose flag. archive ( self , h5 = None ) Dump inputs and outputs into HDF5 file. Parameters: Name Type Description Default h5 str or h5py.File The filename or handle to HDF5 file in which to write the information. If not in informed, a new file is generated. None Returns: Type Description h5py.File Handle to the HDF5 file. Source code in lume/base.py @abstractmethod def archive ( self , h5 = None ): \"\"\" Dump inputs and outputs into HDF5 file. Parameters ---------- h5 : str or h5py.File The filename or handle to HDF5 file in which to write the information. If not in informed, a new file is generated. Returns ------- h5 : h5py.File Handle to the HDF5 file. \"\"\" raise NotImplementedError configure ( self ) Configure and set up for run. Source code in lume/base.py @abstractmethod def configure ( self ): \"\"\" Configure and set up for run. \"\"\" raise NotImplementedError copy ( self ) Returns a deep copy of this object. If a tempdir is being used, will clear this and deconfigure. Source code in lume/base.py def copy ( self ): \"\"\" Returns a deep copy of this object. If a tempdir is being used, will clear this and deconfigure. \"\"\" other = copy . deepcopy ( self ) other . reset () return other fingerprint ( self ) Data fingerprint (hash) using the input parameters. Returns: Type Description str The hash for this object based on the input parameters. Source code in lume/base.py def fingerprint ( self ): \"\"\" Data fingerprint (hash) using the input parameters. Returns ------- fingerprint : str The hash for this object based on the input parameters. \"\"\" return tools . fingerprint ( self . input ) from_hdf5 ( filename ) classmethod Load an object from and hdf5. Parameters: Name Type Description Default filename str required Source code in lume/base.py @classmethod def from_hdf5 ( cls , filename : str ) -> \"Base\" : \"\"\"Load an object from and hdf5. Parameters ---------- filename: str \"\"\" serializer = HDF5Serializer () return serializer . deserialize ( filename ) from_yaml ( yaml_file ) classmethod Returns an Impact object instantiated from a YAML config file Will load intial_particles from an h5 file. Source code in lume/base.py @classmethod def from_yaml ( cls , yaml_file ): \"\"\" Returns an Impact object instantiated from a YAML config file Will load intial_particles from an h5 file. \"\"\" # Try file if os . path . exists ( tools . full_path ( yaml_file )): yaml_file = tools . full_path ( yaml_file ) config = yaml . safe_load ( open ( yaml_file )) # The input file might be relative to the yaml file if 'input_file' in config : f = os . path . expandvars ( config [ 'input_file' ]) if not os . path . isabs ( f ): # Get the yaml file root root , _ = os . path . split ( tools . full_path ( yaml_file )) config [ 'input_file' ] = os . path . join ( root , f ) else : # Try raw string config = yaml . safe_load ( yaml_file ) # Form ParticleGroup from file if 'initial_particles' in config : f = config [ 'initial_particles' ] if not os . path . isabs ( f ): root , _ = os . path . split ( tools . full_path ( yaml_file )) f = os . path . join ( root , f ) config [ 'initial_particles' ] = ParticleGroup ( f ) return cls ( ** config ) load_archive ( self , h5 , configure = True ) Loads input and output from archived h5 file. Parameters: Name Type Description Default h5 str or h5py.File The filename or handle on h5py.File from which to load input and output data required configure bool Whether or not to invoke the configure method after loading, by default True True Source code in lume/base.py @abstractmethod def load_archive ( self , h5 , configure = True ): \"\"\" Loads input and output from archived h5 file. Parameters ---------- h5 : str or h5py.File The filename or handle on h5py.File from which to load input and output data configure : bool, optional Whether or not to invoke the configure method after loading, by default True \"\"\" raise NotImplementedError reset ( self ) Reset this object to its initial state. Source code in lume/base.py def reset ( self ): \"\"\" Reset this object to its initial state. \"\"\" pass run ( self ) Execute the code. Source code in lume/base.py @abstractmethod def run ( self ): \"\"\" Execute the code. \"\"\" raise NotImplementedError to_hdf5 ( self , filename ) Serialize an object to an hdf5 file. Parameters: Name Type Description Default filename str required Source code in lume/base.py def to_hdf5 ( self , filename : str ) -> None : \"\"\"Serialize an object to an hdf5 file. Parameters ---------- filename: str \"\"\" serializer = HDF5Serializer () serializer . serialize ( filename , self )","title":"Base"},{"location":"api/base/#lume.base.Base","text":"Base Interface for LUME-compatible code. Parameters: Name Type Description Default input_file str The input file to be used, by default None None initial_particles dict Initial Particle metadata to be used, by default None None verbose bool Whether or not to produce verbose output, by default False False timeout float The timeout in seconds to be used, by default None None Source code in lume/base.py class Base ( ABC ): \"\"\" Base Interface for LUME-compatible code. Parameters ---------- input_file : str, optional The input file to be used, by default None initial_particles : dict, optional Initial Particle metadata to be used, by default None verbose : bool, optional Whether or not to produce verbose output, by default False timeout : float, optional The timeout in seconds to be used, by default None \"\"\" def __init__ ( self , input_file = None , * , initial_particles = None , verbose = False , timeout = None , ** kwargs ): self . _input_file = input_file self . _initial_particles = initial_particles self . _input = None self . _output = None # Execution self . _timeout = timeout # Logging self . _verbose = verbose # State self . _configured = False self . _finished = False self . _error = False @property def input ( self ): \"\"\" Input data as a dictionary \"\"\" return self . _input @input . setter def input ( self , input ): self . _input = input @property def output ( self ): \"\"\" require openPMD standard, in the future we can add more methods for libs such as pandas Dataframes, xarray DataArrays and Dask Arrays. \"\"\" return self . _output @output . setter def output ( self , output ): self . _output = output @property def initial_particles ( self ): \"\"\" Initial Particles \"\"\" return self . _initial_particles @initial_particles . setter def initial_particles ( self , initial_particles ): self . _initial_particles = initial_particles @abstractmethod def configure ( self ): \"\"\" Configure and set up for run. \"\"\" raise NotImplementedError @abstractmethod def run ( self ): \"\"\" Execute the code. \"\"\" raise NotImplementedError @property def verbose ( self ): \"\"\" Read or configure the verbose flag. \"\"\" return self . _verbose @verbose . setter def verbose ( self , verbose ): self . _verbose = verbose @property def timeout ( self ): \"\"\" Read or configure the timeout in seconds. \"\"\" return self . _timeout @timeout . setter def timeout ( self , timeout ): self . _timeout = timeout @property def configured ( self ): \"\"\" Get or set the configured flag state. \"\"\" return self . _configured @configured . setter def configured ( self , configured ): self . _configured = configured @property def finished ( self ): \"\"\" Get or set the finished flag state. \"\"\" return self . _finished @finished . setter def finished ( self , finished ): self . _finished = finished @property def error ( self ): \"\"\" Get or set the error flag state. \"\"\" return self . _error @error . setter def error ( self , error ): self . _error = error @property def input_file ( self ): \"\"\" Get or set the input file to be processed. \"\"\" return self . _input_file @input_file . setter def input_file ( self , input_file ): \"\"\"dictionary with parameters?\"\"\" self . _input_file = input_file def fingerprint ( self ): \"\"\" Data fingerprint (hash) using the input parameters. Returns ------- fingerprint : str The hash for this object based on the input parameters. \"\"\" return tools . fingerprint ( self . input ) def copy ( self ): \"\"\" Returns a deep copy of this object. If a tempdir is being used, will clear this and deconfigure. \"\"\" other = copy . deepcopy ( self ) other . reset () return other def reset ( self ): \"\"\" Reset this object to its initial state. \"\"\" pass def vprint ( self , * args , ** kwargs ): # Verbose print if self . _verbose : print ( * args , ** kwargs ) @classmethod def from_yaml ( cls , yaml_file ): \"\"\" Returns an Impact object instantiated from a YAML config file Will load intial_particles from an h5 file. \"\"\" # Try file if os . path . exists ( tools . full_path ( yaml_file )): yaml_file = tools . full_path ( yaml_file ) config = yaml . safe_load ( open ( yaml_file )) # The input file might be relative to the yaml file if 'input_file' in config : f = os . path . expandvars ( config [ 'input_file' ]) if not os . path . isabs ( f ): # Get the yaml file root root , _ = os . path . split ( tools . full_path ( yaml_file )) config [ 'input_file' ] = os . path . join ( root , f ) else : # Try raw string config = yaml . safe_load ( yaml_file ) # Form ParticleGroup from file if 'initial_particles' in config : f = config [ 'initial_particles' ] if not os . path . isabs ( f ): root , _ = os . path . split ( tools . full_path ( yaml_file )) f = os . path . join ( root , f ) config [ 'initial_particles' ] = ParticleGroup ( f ) return cls ( ** config ) def to_hdf5 ( self , filename : str ) -> None : \"\"\"Serialize an object to an hdf5 file. Parameters ---------- filename: str \"\"\" serializer = HDF5Serializer () serializer . serialize ( filename , self ) @classmethod def from_hdf5 ( cls , filename : str ) -> \"Base\" : \"\"\"Load an object from and hdf5. Parameters ---------- filename: str \"\"\" serializer = HDF5Serializer () return serializer . deserialize ( filename ) @abstractmethod def archive ( self , h5 = None ): \"\"\" Dump inputs and outputs into HDF5 file. Parameters ---------- h5 : str or h5py.File The filename or handle to HDF5 file in which to write the information. If not in informed, a new file is generated. Returns ------- h5 : h5py.File Handle to the HDF5 file. \"\"\" raise NotImplementedError @abstractmethod def load_archive ( self , h5 , configure = True ): \"\"\" Loads input and output from archived h5 file. Parameters ---------- h5 : str or h5py.File The filename or handle on h5py.File from which to load input and output data configure : bool, optional Whether or not to invoke the configure method after loading, by default True \"\"\" raise NotImplementedError","title":"Base"},{"location":"api/base/#lume.base.Base.configured","text":"Get or set the configured flag state.","title":"configured"},{"location":"api/base/#lume.base.Base.error","text":"Get or set the error flag state.","title":"error"},{"location":"api/base/#lume.base.Base.finished","text":"Get or set the finished flag state.","title":"finished"},{"location":"api/base/#lume.base.Base.initial_particles","text":"Initial Particles","title":"initial_particles"},{"location":"api/base/#lume.base.Base.input","text":"Input data as a dictionary","title":"input"},{"location":"api/base/#lume.base.Base.input_file","text":"Get or set the input file to be processed.","title":"input_file"},{"location":"api/base/#lume.base.Base.output","text":"require openPMD standard, in the future we can add more methods for libs such as pandas Dataframes, xarray DataArrays and Dask Arrays.","title":"output"},{"location":"api/base/#lume.base.Base.timeout","text":"Read or configure the timeout in seconds.","title":"timeout"},{"location":"api/base/#lume.base.Base.verbose","text":"Read or configure the verbose flag.","title":"verbose"},{"location":"api/base/#lume.base.Base.archive","text":"Dump inputs and outputs into HDF5 file. Parameters: Name Type Description Default h5 str or h5py.File The filename or handle to HDF5 file in which to write the information. If not in informed, a new file is generated. None Returns: Type Description h5py.File Handle to the HDF5 file. Source code in lume/base.py @abstractmethod def archive ( self , h5 = None ): \"\"\" Dump inputs and outputs into HDF5 file. Parameters ---------- h5 : str or h5py.File The filename or handle to HDF5 file in which to write the information. If not in informed, a new file is generated. Returns ------- h5 : h5py.File Handle to the HDF5 file. \"\"\" raise NotImplementedError","title":"archive()"},{"location":"api/base/#lume.base.Base.configure","text":"Configure and set up for run. Source code in lume/base.py @abstractmethod def configure ( self ): \"\"\" Configure and set up for run. \"\"\" raise NotImplementedError","title":"configure()"},{"location":"api/base/#lume.base.Base.copy","text":"Returns a deep copy of this object. If a tempdir is being used, will clear this and deconfigure. Source code in lume/base.py def copy ( self ): \"\"\" Returns a deep copy of this object. If a tempdir is being used, will clear this and deconfigure. \"\"\" other = copy . deepcopy ( self ) other . reset () return other","title":"copy()"},{"location":"api/base/#lume.base.Base.fingerprint","text":"Data fingerprint (hash) using the input parameters. Returns: Type Description str The hash for this object based on the input parameters. Source code in lume/base.py def fingerprint ( self ): \"\"\" Data fingerprint (hash) using the input parameters. Returns ------- fingerprint : str The hash for this object based on the input parameters. \"\"\" return tools . fingerprint ( self . input )","title":"fingerprint()"},{"location":"api/base/#lume.base.Base.from_hdf5","text":"Load an object from and hdf5. Parameters: Name Type Description Default filename str required Source code in lume/base.py @classmethod def from_hdf5 ( cls , filename : str ) -> \"Base\" : \"\"\"Load an object from and hdf5. Parameters ---------- filename: str \"\"\" serializer = HDF5Serializer () return serializer . deserialize ( filename )","title":"from_hdf5()"},{"location":"api/base/#lume.base.Base.from_yaml","text":"Returns an Impact object instantiated from a YAML config file Will load intial_particles from an h5 file. Source code in lume/base.py @classmethod def from_yaml ( cls , yaml_file ): \"\"\" Returns an Impact object instantiated from a YAML config file Will load intial_particles from an h5 file. \"\"\" # Try file if os . path . exists ( tools . full_path ( yaml_file )): yaml_file = tools . full_path ( yaml_file ) config = yaml . safe_load ( open ( yaml_file )) # The input file might be relative to the yaml file if 'input_file' in config : f = os . path . expandvars ( config [ 'input_file' ]) if not os . path . isabs ( f ): # Get the yaml file root root , _ = os . path . split ( tools . full_path ( yaml_file )) config [ 'input_file' ] = os . path . join ( root , f ) else : # Try raw string config = yaml . safe_load ( yaml_file ) # Form ParticleGroup from file if 'initial_particles' in config : f = config [ 'initial_particles' ] if not os . path . isabs ( f ): root , _ = os . path . split ( tools . full_path ( yaml_file )) f = os . path . join ( root , f ) config [ 'initial_particles' ] = ParticleGroup ( f ) return cls ( ** config )","title":"from_yaml()"},{"location":"api/base/#lume.base.Base.load_archive","text":"Loads input and output from archived h5 file. Parameters: Name Type Description Default h5 str or h5py.File The filename or handle on h5py.File from which to load input and output data required configure bool Whether or not to invoke the configure method after loading, by default True True Source code in lume/base.py @abstractmethod def load_archive ( self , h5 , configure = True ): \"\"\" Loads input and output from archived h5 file. Parameters ---------- h5 : str or h5py.File The filename or handle on h5py.File from which to load input and output data configure : bool, optional Whether or not to invoke the configure method after loading, by default True \"\"\" raise NotImplementedError","title":"load_archive()"},{"location":"api/base/#lume.base.Base.reset","text":"Reset this object to its initial state. Source code in lume/base.py def reset ( self ): \"\"\" Reset this object to its initial state. \"\"\" pass","title":"reset()"},{"location":"api/base/#lume.base.Base.run","text":"Execute the code. Source code in lume/base.py @abstractmethod def run ( self ): \"\"\" Execute the code. \"\"\" raise NotImplementedError","title":"run()"},{"location":"api/base/#lume.base.Base.to_hdf5","text":"Serialize an object to an hdf5 file. Parameters: Name Type Description Default filename str required Source code in lume/base.py def to_hdf5 ( self , filename : str ) -> None : \"\"\"Serialize an object to an hdf5 file. Parameters ---------- filename: str \"\"\" serializer = HDF5Serializer () serializer . serialize ( filename , self )","title":"to_hdf5()"},{"location":"api/command_wrapper/","text":"lume.base.CommandWrapper ( Base ) Interface for LUME-compatible code. Parameters: Name Type Description Default input_file str The input file to be used, by default None None initial_particles dict Initial Particle metadata to be used, by default None None command str The command to be executed by this wrapper. E.g. ImpactTexe If not specified, the class attribute COMMAND is used, by default None None command_mpi str The command to be executed by this wrapper when using MPI. E.g. ImpactTexe-mpi If not specified, the class attribute COMMAND_MPI is used, by default None None use_mpi bool Whether or not to use MPI when running this code, by default False False mpi_run str The command syntax to invoke mpirun. If not specified, the class attribute MPI_RUN is used. This is expected to be a formated string taking as parameters the number of processors (nproc) and the command to be executed (command_mpi), by default None '' use_temp_dir bool Whether or not to use a temporary directory to run the process, by default True True workdir str The work directory to be used, by default None None verbose bool Whether or not to produce verbose output, by default False False timeout float The timeout in seconds to be used, by default None None Source code in lume/base.py class CommandWrapper ( Base ): \"\"\" Interface for LUME-compatible code. Parameters ---------- input_file : str, optional The input file to be used, by default None initial_particles : dict, optional Initial Particle metadata to be used, by default None command : str, optional The command to be executed by this wrapper. E.g. ImpactTexe If not specified, the class attribute `COMMAND` is used, by default None command_mpi : str, optional The command to be executed by this wrapper when using MPI. E.g. ImpactTexe-mpi If not specified, the class attribute `COMMAND_MPI` is used, by default None use_mpi : bool, optional Whether or not to use MPI when running this code, by default False mpi_run : str, optional The command syntax to invoke mpirun. If not specified, the class attribute `MPI_RUN` is used. This is expected to be a formated string taking as parameters the number of processors (nproc) and the command to be executed (command_mpi), by default None use_temp_dir : bool, optional Whether or not to use a temporary directory to run the process, by default True workdir : str, optional The work directory to be used, by default None verbose : bool, optional Whether or not to produce verbose output, by default False timeout : float, optional The timeout in seconds to be used, by default None \"\"\" COMMAND = \"\" COMMAND_MPI = \"\" MPI_RUN = \"mpirun -n {nproc} {command_mpi} \" def __init__ ( self , input_file = None , * , initial_particles = None , command = None , command_mpi = None , use_mpi = False , mpi_run = \"\" , use_temp_dir = True , workdir = None , verbose = False , timeout = None ): super () . __init__ ( input_file = input_file , initial_particles = initial_particles , verbose = verbose , timeout = timeout ) # Execution self . _command = command or self . COMMAND self . _command_mpi = command_mpi or self . COMMAND_MPI self . _use_mpi = use_mpi self . _mpi_run = mpi_run or self . MPI_RUN self . _tempdir = None self . _use_temp_dir = use_temp_dir self . _workdir = workdir self . _base_path = None @property def use_mpi ( self ): \"\"\" Whether or not MPI should be used if supported. \"\"\" return self . _use_mpi @use_mpi . setter def use_mpi ( self , use_mpi ): self . _use_mpi = use_mpi @property def mpi_run ( self ): \"\"\" The command syntax to invoke mpirun. If not specified, the class attribute `MPI_RUN` is used. This is expected to be a formated string taking as parameters the number of processors (nproc) and the command to be executed (command_mpi). \"\"\" return self . _mpi_run @mpi_run . setter def mpi_run ( self , mpi_run ): self . _mpi_run = mpi_run @property def path ( self ): \"\"\" The base path used by the code to manipulate files. \"\"\" return self . _base_path @path . setter def path ( self , path ): self . _base_path = path @property def use_temp_dir ( self ): \"\"\" Whether or not the code is using temporary dir to run. Returns ------- bool \"\"\" return self . _use_temp_dir @property def command ( self ): \"\"\" Get or set the command to be executed. Defaults to `COMMAND`. \"\"\" return self . _command @command . setter def command ( self , command ): cmd = command if command : cmd = tools . full_path ( command ) assert os . path . exists ( cmd ), 'ERROR: Command does not exist:' + command self . _command = cmd @property def command_mpi ( self ): \"\"\" Get or set the command to be executed when running with MPI. Defaults to `COMMAND_MPI`. \"\"\" return self . _command_mpi @command_mpi . setter def command_mpi ( self , command_mpi ): cmd = command_mpi if command_mpi : cmd = tools . full_path ( command_mpi ) assert os . path . exists ( cmd ), 'ERROR: Command does not exist:' + command_mpi self . _command_mpi = cmd def get_run_script ( self , write_to_path = True ): \"\"\" Assembles the run script. Optionally writes a file 'run' with this line to path. This expect to run with .path as the cwd. Parameters ---------- write_to_path : bool Whether or not to write the script to the path. Returns ------- runscript : str The script to run the command. \"\"\" _ , infile = os . path . split ( self . input_file ) # Expect to run locally. Astra has problems with long paths. runscript = [ self . command , infile ] if write_to_path : with open ( os . path . join ( self . path , 'run' ), 'w' ) as f : f . write ( ' ' . join ( runscript )) return runscript @classmethod def from_archive ( cls , archive_h5 ): \"\"\" Class method to return a new instance via restore of an archive file. Parameters ---------- archive_h5 : str or h5py.File The filename or handle to HDF5 file in which to write the information. Returns ------- c : object An instance of the class with information from the archive file. \"\"\" c = cls () c . load_archive ( archive_h5 ) return c @abstractmethod def plot ( self , y = [], x = None , xlim = None , ylim = None , ylim2 = None , y2 = [], nice = True , include_layout = True , include_labels = False , include_particles = True , include_legend = True , return_figure = False ): \"\"\" Plots output multiple keys. Parameters ---------- y : list List of keys to be displayed on the Y axis x : str Key to be displayed as X axis xlim : list Limits for the X axis ylim : list Limits for the Y axis ylim2 : list Limits for the secondary Y axis y2 : list List of keys to be displayed on the secondary Y axis nice : bool Whether or not a nice SI prefix and scaling will be used to make the numbers reasonably sized. Default: True include_layout : bool Whether or not to include a layout plot at the bottom. Default: True include_labels : bool Whether or not the layout will include element labels. Default: False include_particles : bool Whether or not to plot the particle statistics as dots. Default: True include_legend : bool Whether or not the plot should include the legend. Default: True return_figure : bool Whether or not to return the figure object for further manipulation. Default: True kwargs : dict Extra arguments can be passed to the specific plotting function. Returns ------- fig : matplotlib.pyplot.figure.Figure The plot figure for further customizations or `None` if `return_figure` is set to False. \"\"\" raise NotImplementedError @abstractmethod def write_input ( self , input_filename ): \"\"\" Write the input parameters into the file. Parameters ---------- input_filename : str The file in which to write the input parameters \"\"\" raise NotImplementedError @abstractmethod def input_parser ( self , path ): \"\"\" Invoke the specialized input parser and returns the input dictionary. Parameters ---------- path : str Path to the input file Returns ------- input : dict The input dictionary \"\"\" raise NotImplementedError def load_input ( self , input_filepath , ** kwargs ): \"\"\" Invoke the `input_parser` with the given input file path as argument. This method sets the input property to the contents of the input file after the parser. Parameters ---------- input_filepath : str The input file path kwargs : dict Support for extra arguments. \"\"\" f = tools . full_path ( input_filepath ) self . original_path , self . original_input_file = os . path . split ( f ) # Get original path, filename self . input = self . input_parser ( f ) @abstractmethod def load_output ( self , ** kwargs ): \"\"\" Reads and load into `.output` the outputs generated by the code. \"\"\" raise NotImplementedError def reset ( self ): \"\"\" Reset this object to its initial state. \"\"\" super () . reset () # Clear this if self . _use_temp_dir : self . _base_path = None self . _configured = False def setup_workdir ( self , workdir , cleanup = True ): \"\"\" Set up the work directory if `use_temp_dir` is set. Parameters ---------- workdir : str The directory name. cleanup : bool Whether or not to remove the directory at exit. Defaults to True. \"\"\" # Set paths if self . _use_temp_dir : # Need to attach this to the object. Otherwise it will go out of scope. self . _tempdir = tempfile . TemporaryDirectory ( dir = workdir ) self . _base_path = self . _tempdir . name if cleanup : atexit . register ( self . _cleanup_workdir ) else : # Work in place self . _base_path = self . original_path def _cleanup_workdir ( self ): if self . _tempdir : try : self . _tempdir . cleanup () except OSError : shutil . rmtree ( self . _tempdir . name , ignore_errors = True ) command property writable Get or set the command to be executed. Defaults to COMMAND . command_mpi property writable Get or set the command to be executed when running with MPI. Defaults to COMMAND_MPI . mpi_run property writable The command syntax to invoke mpirun. If not specified, the class attribute MPI_RUN is used. This is expected to be a formated string taking as parameters the number of processors (nproc) and the command to be executed (command_mpi). path property writable The base path used by the code to manipulate files. use_mpi property writable Whether or not MPI should be used if supported. use_temp_dir property readonly Whether or not the code is using temporary dir to run. Returns: Type Description bool from_archive ( archive_h5 ) classmethod Class method to return a new instance via restore of an archive file. Parameters: Name Type Description Default archive_h5 str or h5py.File The filename or handle to HDF5 file in which to write the information. required Returns: Type Description object An instance of the class with information from the archive file. Source code in lume/base.py @classmethod def from_archive ( cls , archive_h5 ): \"\"\" Class method to return a new instance via restore of an archive file. Parameters ---------- archive_h5 : str or h5py.File The filename or handle to HDF5 file in which to write the information. Returns ------- c : object An instance of the class with information from the archive file. \"\"\" c = cls () c . load_archive ( archive_h5 ) return c get_run_script ( self , write_to_path = True ) Assembles the run script. Optionally writes a file 'run' with this line to path. This expect to run with .path as the cwd. Parameters: Name Type Description Default write_to_path bool Whether or not to write the script to the path. True Returns: Type Description str The script to run the command. Source code in lume/base.py def get_run_script ( self , write_to_path = True ): \"\"\" Assembles the run script. Optionally writes a file 'run' with this line to path. This expect to run with .path as the cwd. Parameters ---------- write_to_path : bool Whether or not to write the script to the path. Returns ------- runscript : str The script to run the command. \"\"\" _ , infile = os . path . split ( self . input_file ) # Expect to run locally. Astra has problems with long paths. runscript = [ self . command , infile ] if write_to_path : with open ( os . path . join ( self . path , 'run' ), 'w' ) as f : f . write ( ' ' . join ( runscript )) return runscript input_parser ( self , path ) Invoke the specialized input parser and returns the input dictionary. Parameters: Name Type Description Default path str Path to the input file required Returns: Type Description dict The input dictionary Source code in lume/base.py @abstractmethod def input_parser ( self , path ): \"\"\" Invoke the specialized input parser and returns the input dictionary. Parameters ---------- path : str Path to the input file Returns ------- input : dict The input dictionary \"\"\" raise NotImplementedError load_input ( self , input_filepath , ** kwargs ) Invoke the input_parser with the given input file path as argument. This method sets the input property to the contents of the input file after the parser. Parameters: Name Type Description Default input_filepath str The input file path required kwargs dict Support for extra arguments. {} Source code in lume/base.py def load_input ( self , input_filepath , ** kwargs ): \"\"\" Invoke the `input_parser` with the given input file path as argument. This method sets the input property to the contents of the input file after the parser. Parameters ---------- input_filepath : str The input file path kwargs : dict Support for extra arguments. \"\"\" f = tools . full_path ( input_filepath ) self . original_path , self . original_input_file = os . path . split ( f ) # Get original path, filename self . input = self . input_parser ( f ) load_output ( self , ** kwargs ) Reads and load into .output the outputs generated by the code. Source code in lume/base.py @abstractmethod def load_output ( self , ** kwargs ): \"\"\" Reads and load into `.output` the outputs generated by the code. \"\"\" raise NotImplementedError plot ( self , y = [], x = None , xlim = None , ylim = None , ylim2 = None , y2 = [], nice = True , include_layout = True , include_labels = False , include_particles = True , include_legend = True , return_figure = False ) Plots output multiple keys. Parameters: Name Type Description Default y list List of keys to be displayed on the Y axis [] x str Key to be displayed as X axis None xlim list Limits for the X axis None ylim list Limits for the Y axis None ylim2 list Limits for the secondary Y axis None y2 list List of keys to be displayed on the secondary Y axis [] nice bool Whether or not a nice SI prefix and scaling will be used to make the numbers reasonably sized. Default: True True include_layout bool Whether or not to include a layout plot at the bottom. Default: True True include_labels bool Whether or not the layout will include element labels. Default: False False include_particles bool Whether or not to plot the particle statistics as dots. Default: True True include_legend bool Whether or not the plot should include the legend. Default: True True return_figure bool Whether or not to return the figure object for further manipulation. Default: True False kwargs dict Extra arguments can be passed to the specific plotting function. required Returns: Type Description matplotlib.pyplot.figure.Figure The plot figure for further customizations or None if return_figure is set to False. Source code in lume/base.py @abstractmethod def plot ( self , y = [], x = None , xlim = None , ylim = None , ylim2 = None , y2 = [], nice = True , include_layout = True , include_labels = False , include_particles = True , include_legend = True , return_figure = False ): \"\"\" Plots output multiple keys. Parameters ---------- y : list List of keys to be displayed on the Y axis x : str Key to be displayed as X axis xlim : list Limits for the X axis ylim : list Limits for the Y axis ylim2 : list Limits for the secondary Y axis y2 : list List of keys to be displayed on the secondary Y axis nice : bool Whether or not a nice SI prefix and scaling will be used to make the numbers reasonably sized. Default: True include_layout : bool Whether or not to include a layout plot at the bottom. Default: True include_labels : bool Whether or not the layout will include element labels. Default: False include_particles : bool Whether or not to plot the particle statistics as dots. Default: True include_legend : bool Whether or not the plot should include the legend. Default: True return_figure : bool Whether or not to return the figure object for further manipulation. Default: True kwargs : dict Extra arguments can be passed to the specific plotting function. Returns ------- fig : matplotlib.pyplot.figure.Figure The plot figure for further customizations or `None` if `return_figure` is set to False. \"\"\" raise NotImplementedError reset ( self ) Reset this object to its initial state. Source code in lume/base.py def reset ( self ): \"\"\" Reset this object to its initial state. \"\"\" super () . reset () # Clear this if self . _use_temp_dir : self . _base_path = None self . _configured = False setup_workdir ( self , workdir , cleanup = True ) Set up the work directory if use_temp_dir is set. Parameters: Name Type Description Default workdir str The directory name. required cleanup bool Whether or not to remove the directory at exit. Defaults to True. True Source code in lume/base.py def setup_workdir ( self , workdir , cleanup = True ): \"\"\" Set up the work directory if `use_temp_dir` is set. Parameters ---------- workdir : str The directory name. cleanup : bool Whether or not to remove the directory at exit. Defaults to True. \"\"\" # Set paths if self . _use_temp_dir : # Need to attach this to the object. Otherwise it will go out of scope. self . _tempdir = tempfile . TemporaryDirectory ( dir = workdir ) self . _base_path = self . _tempdir . name if cleanup : atexit . register ( self . _cleanup_workdir ) else : # Work in place self . _base_path = self . original_path write_input ( self , input_filename ) Write the input parameters into the file. Parameters: Name Type Description Default input_filename str The file in which to write the input parameters required Source code in lume/base.py @abstractmethod def write_input ( self , input_filename ): \"\"\" Write the input parameters into the file. Parameters ---------- input_filename : str The file in which to write the input parameters \"\"\" raise NotImplementedError","title":"CommandWrapper"},{"location":"api/command_wrapper/#lume.base.CommandWrapper","text":"Interface for LUME-compatible code. Parameters: Name Type Description Default input_file str The input file to be used, by default None None initial_particles dict Initial Particle metadata to be used, by default None None command str The command to be executed by this wrapper. E.g. ImpactTexe If not specified, the class attribute COMMAND is used, by default None None command_mpi str The command to be executed by this wrapper when using MPI. E.g. ImpactTexe-mpi If not specified, the class attribute COMMAND_MPI is used, by default None None use_mpi bool Whether or not to use MPI when running this code, by default False False mpi_run str The command syntax to invoke mpirun. If not specified, the class attribute MPI_RUN is used. This is expected to be a formated string taking as parameters the number of processors (nproc) and the command to be executed (command_mpi), by default None '' use_temp_dir bool Whether or not to use a temporary directory to run the process, by default True True workdir str The work directory to be used, by default None None verbose bool Whether or not to produce verbose output, by default False False timeout float The timeout in seconds to be used, by default None None Source code in lume/base.py class CommandWrapper ( Base ): \"\"\" Interface for LUME-compatible code. Parameters ---------- input_file : str, optional The input file to be used, by default None initial_particles : dict, optional Initial Particle metadata to be used, by default None command : str, optional The command to be executed by this wrapper. E.g. ImpactTexe If not specified, the class attribute `COMMAND` is used, by default None command_mpi : str, optional The command to be executed by this wrapper when using MPI. E.g. ImpactTexe-mpi If not specified, the class attribute `COMMAND_MPI` is used, by default None use_mpi : bool, optional Whether or not to use MPI when running this code, by default False mpi_run : str, optional The command syntax to invoke mpirun. If not specified, the class attribute `MPI_RUN` is used. This is expected to be a formated string taking as parameters the number of processors (nproc) and the command to be executed (command_mpi), by default None use_temp_dir : bool, optional Whether or not to use a temporary directory to run the process, by default True workdir : str, optional The work directory to be used, by default None verbose : bool, optional Whether or not to produce verbose output, by default False timeout : float, optional The timeout in seconds to be used, by default None \"\"\" COMMAND = \"\" COMMAND_MPI = \"\" MPI_RUN = \"mpirun -n {nproc} {command_mpi} \" def __init__ ( self , input_file = None , * , initial_particles = None , command = None , command_mpi = None , use_mpi = False , mpi_run = \"\" , use_temp_dir = True , workdir = None , verbose = False , timeout = None ): super () . __init__ ( input_file = input_file , initial_particles = initial_particles , verbose = verbose , timeout = timeout ) # Execution self . _command = command or self . COMMAND self . _command_mpi = command_mpi or self . COMMAND_MPI self . _use_mpi = use_mpi self . _mpi_run = mpi_run or self . MPI_RUN self . _tempdir = None self . _use_temp_dir = use_temp_dir self . _workdir = workdir self . _base_path = None @property def use_mpi ( self ): \"\"\" Whether or not MPI should be used if supported. \"\"\" return self . _use_mpi @use_mpi . setter def use_mpi ( self , use_mpi ): self . _use_mpi = use_mpi @property def mpi_run ( self ): \"\"\" The command syntax to invoke mpirun. If not specified, the class attribute `MPI_RUN` is used. This is expected to be a formated string taking as parameters the number of processors (nproc) and the command to be executed (command_mpi). \"\"\" return self . _mpi_run @mpi_run . setter def mpi_run ( self , mpi_run ): self . _mpi_run = mpi_run @property def path ( self ): \"\"\" The base path used by the code to manipulate files. \"\"\" return self . _base_path @path . setter def path ( self , path ): self . _base_path = path @property def use_temp_dir ( self ): \"\"\" Whether or not the code is using temporary dir to run. Returns ------- bool \"\"\" return self . _use_temp_dir @property def command ( self ): \"\"\" Get or set the command to be executed. Defaults to `COMMAND`. \"\"\" return self . _command @command . setter def command ( self , command ): cmd = command if command : cmd = tools . full_path ( command ) assert os . path . exists ( cmd ), 'ERROR: Command does not exist:' + command self . _command = cmd @property def command_mpi ( self ): \"\"\" Get or set the command to be executed when running with MPI. Defaults to `COMMAND_MPI`. \"\"\" return self . _command_mpi @command_mpi . setter def command_mpi ( self , command_mpi ): cmd = command_mpi if command_mpi : cmd = tools . full_path ( command_mpi ) assert os . path . exists ( cmd ), 'ERROR: Command does not exist:' + command_mpi self . _command_mpi = cmd def get_run_script ( self , write_to_path = True ): \"\"\" Assembles the run script. Optionally writes a file 'run' with this line to path. This expect to run with .path as the cwd. Parameters ---------- write_to_path : bool Whether or not to write the script to the path. Returns ------- runscript : str The script to run the command. \"\"\" _ , infile = os . path . split ( self . input_file ) # Expect to run locally. Astra has problems with long paths. runscript = [ self . command , infile ] if write_to_path : with open ( os . path . join ( self . path , 'run' ), 'w' ) as f : f . write ( ' ' . join ( runscript )) return runscript @classmethod def from_archive ( cls , archive_h5 ): \"\"\" Class method to return a new instance via restore of an archive file. Parameters ---------- archive_h5 : str or h5py.File The filename or handle to HDF5 file in which to write the information. Returns ------- c : object An instance of the class with information from the archive file. \"\"\" c = cls () c . load_archive ( archive_h5 ) return c @abstractmethod def plot ( self , y = [], x = None , xlim = None , ylim = None , ylim2 = None , y2 = [], nice = True , include_layout = True , include_labels = False , include_particles = True , include_legend = True , return_figure = False ): \"\"\" Plots output multiple keys. Parameters ---------- y : list List of keys to be displayed on the Y axis x : str Key to be displayed as X axis xlim : list Limits for the X axis ylim : list Limits for the Y axis ylim2 : list Limits for the secondary Y axis y2 : list List of keys to be displayed on the secondary Y axis nice : bool Whether or not a nice SI prefix and scaling will be used to make the numbers reasonably sized. Default: True include_layout : bool Whether or not to include a layout plot at the bottom. Default: True include_labels : bool Whether or not the layout will include element labels. Default: False include_particles : bool Whether or not to plot the particle statistics as dots. Default: True include_legend : bool Whether or not the plot should include the legend. Default: True return_figure : bool Whether or not to return the figure object for further manipulation. Default: True kwargs : dict Extra arguments can be passed to the specific plotting function. Returns ------- fig : matplotlib.pyplot.figure.Figure The plot figure for further customizations or `None` if `return_figure` is set to False. \"\"\" raise NotImplementedError @abstractmethod def write_input ( self , input_filename ): \"\"\" Write the input parameters into the file. Parameters ---------- input_filename : str The file in which to write the input parameters \"\"\" raise NotImplementedError @abstractmethod def input_parser ( self , path ): \"\"\" Invoke the specialized input parser and returns the input dictionary. Parameters ---------- path : str Path to the input file Returns ------- input : dict The input dictionary \"\"\" raise NotImplementedError def load_input ( self , input_filepath , ** kwargs ): \"\"\" Invoke the `input_parser` with the given input file path as argument. This method sets the input property to the contents of the input file after the parser. Parameters ---------- input_filepath : str The input file path kwargs : dict Support for extra arguments. \"\"\" f = tools . full_path ( input_filepath ) self . original_path , self . original_input_file = os . path . split ( f ) # Get original path, filename self . input = self . input_parser ( f ) @abstractmethod def load_output ( self , ** kwargs ): \"\"\" Reads and load into `.output` the outputs generated by the code. \"\"\" raise NotImplementedError def reset ( self ): \"\"\" Reset this object to its initial state. \"\"\" super () . reset () # Clear this if self . _use_temp_dir : self . _base_path = None self . _configured = False def setup_workdir ( self , workdir , cleanup = True ): \"\"\" Set up the work directory if `use_temp_dir` is set. Parameters ---------- workdir : str The directory name. cleanup : bool Whether or not to remove the directory at exit. Defaults to True. \"\"\" # Set paths if self . _use_temp_dir : # Need to attach this to the object. Otherwise it will go out of scope. self . _tempdir = tempfile . TemporaryDirectory ( dir = workdir ) self . _base_path = self . _tempdir . name if cleanup : atexit . register ( self . _cleanup_workdir ) else : # Work in place self . _base_path = self . original_path def _cleanup_workdir ( self ): if self . _tempdir : try : self . _tempdir . cleanup () except OSError : shutil . rmtree ( self . _tempdir . name , ignore_errors = True )","title":"CommandWrapper"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.command","text":"Get or set the command to be executed. Defaults to COMMAND .","title":"command"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.command_mpi","text":"Get or set the command to be executed when running with MPI. Defaults to COMMAND_MPI .","title":"command_mpi"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.mpi_run","text":"The command syntax to invoke mpirun. If not specified, the class attribute MPI_RUN is used. This is expected to be a formated string taking as parameters the number of processors (nproc) and the command to be executed (command_mpi).","title":"mpi_run"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.path","text":"The base path used by the code to manipulate files.","title":"path"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.use_mpi","text":"Whether or not MPI should be used if supported.","title":"use_mpi"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.use_temp_dir","text":"Whether or not the code is using temporary dir to run. Returns: Type Description bool","title":"use_temp_dir"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.from_archive","text":"Class method to return a new instance via restore of an archive file. Parameters: Name Type Description Default archive_h5 str or h5py.File The filename or handle to HDF5 file in which to write the information. required Returns: Type Description object An instance of the class with information from the archive file. Source code in lume/base.py @classmethod def from_archive ( cls , archive_h5 ): \"\"\" Class method to return a new instance via restore of an archive file. Parameters ---------- archive_h5 : str or h5py.File The filename or handle to HDF5 file in which to write the information. Returns ------- c : object An instance of the class with information from the archive file. \"\"\" c = cls () c . load_archive ( archive_h5 ) return c","title":"from_archive()"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.get_run_script","text":"Assembles the run script. Optionally writes a file 'run' with this line to path. This expect to run with .path as the cwd. Parameters: Name Type Description Default write_to_path bool Whether or not to write the script to the path. True Returns: Type Description str The script to run the command. Source code in lume/base.py def get_run_script ( self , write_to_path = True ): \"\"\" Assembles the run script. Optionally writes a file 'run' with this line to path. This expect to run with .path as the cwd. Parameters ---------- write_to_path : bool Whether or not to write the script to the path. Returns ------- runscript : str The script to run the command. \"\"\" _ , infile = os . path . split ( self . input_file ) # Expect to run locally. Astra has problems with long paths. runscript = [ self . command , infile ] if write_to_path : with open ( os . path . join ( self . path , 'run' ), 'w' ) as f : f . write ( ' ' . join ( runscript )) return runscript","title":"get_run_script()"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.input_parser","text":"Invoke the specialized input parser and returns the input dictionary. Parameters: Name Type Description Default path str Path to the input file required Returns: Type Description dict The input dictionary Source code in lume/base.py @abstractmethod def input_parser ( self , path ): \"\"\" Invoke the specialized input parser and returns the input dictionary. Parameters ---------- path : str Path to the input file Returns ------- input : dict The input dictionary \"\"\" raise NotImplementedError","title":"input_parser()"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.load_input","text":"Invoke the input_parser with the given input file path as argument. This method sets the input property to the contents of the input file after the parser. Parameters: Name Type Description Default input_filepath str The input file path required kwargs dict Support for extra arguments. {} Source code in lume/base.py def load_input ( self , input_filepath , ** kwargs ): \"\"\" Invoke the `input_parser` with the given input file path as argument. This method sets the input property to the contents of the input file after the parser. Parameters ---------- input_filepath : str The input file path kwargs : dict Support for extra arguments. \"\"\" f = tools . full_path ( input_filepath ) self . original_path , self . original_input_file = os . path . split ( f ) # Get original path, filename self . input = self . input_parser ( f )","title":"load_input()"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.load_output","text":"Reads and load into .output the outputs generated by the code. Source code in lume/base.py @abstractmethod def load_output ( self , ** kwargs ): \"\"\" Reads and load into `.output` the outputs generated by the code. \"\"\" raise NotImplementedError","title":"load_output()"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.plot","text":"Plots output multiple keys. Parameters: Name Type Description Default y list List of keys to be displayed on the Y axis [] x str Key to be displayed as X axis None xlim list Limits for the X axis None ylim list Limits for the Y axis None ylim2 list Limits for the secondary Y axis None y2 list List of keys to be displayed on the secondary Y axis [] nice bool Whether or not a nice SI prefix and scaling will be used to make the numbers reasonably sized. Default: True True include_layout bool Whether or not to include a layout plot at the bottom. Default: True True include_labels bool Whether or not the layout will include element labels. Default: False False include_particles bool Whether or not to plot the particle statistics as dots. Default: True True include_legend bool Whether or not the plot should include the legend. Default: True True return_figure bool Whether or not to return the figure object for further manipulation. Default: True False kwargs dict Extra arguments can be passed to the specific plotting function. required Returns: Type Description matplotlib.pyplot.figure.Figure The plot figure for further customizations or None if return_figure is set to False. Source code in lume/base.py @abstractmethod def plot ( self , y = [], x = None , xlim = None , ylim = None , ylim2 = None , y2 = [], nice = True , include_layout = True , include_labels = False , include_particles = True , include_legend = True , return_figure = False ): \"\"\" Plots output multiple keys. Parameters ---------- y : list List of keys to be displayed on the Y axis x : str Key to be displayed as X axis xlim : list Limits for the X axis ylim : list Limits for the Y axis ylim2 : list Limits for the secondary Y axis y2 : list List of keys to be displayed on the secondary Y axis nice : bool Whether or not a nice SI prefix and scaling will be used to make the numbers reasonably sized. Default: True include_layout : bool Whether or not to include a layout plot at the bottom. Default: True include_labels : bool Whether or not the layout will include element labels. Default: False include_particles : bool Whether or not to plot the particle statistics as dots. Default: True include_legend : bool Whether or not the plot should include the legend. Default: True return_figure : bool Whether or not to return the figure object for further manipulation. Default: True kwargs : dict Extra arguments can be passed to the specific plotting function. Returns ------- fig : matplotlib.pyplot.figure.Figure The plot figure for further customizations or `None` if `return_figure` is set to False. \"\"\" raise NotImplementedError","title":"plot()"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.reset","text":"Reset this object to its initial state. Source code in lume/base.py def reset ( self ): \"\"\" Reset this object to its initial state. \"\"\" super () . reset () # Clear this if self . _use_temp_dir : self . _base_path = None self . _configured = False","title":"reset()"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.setup_workdir","text":"Set up the work directory if use_temp_dir is set. Parameters: Name Type Description Default workdir str The directory name. required cleanup bool Whether or not to remove the directory at exit. Defaults to True. True Source code in lume/base.py def setup_workdir ( self , workdir , cleanup = True ): \"\"\" Set up the work directory if `use_temp_dir` is set. Parameters ---------- workdir : str The directory name. cleanup : bool Whether or not to remove the directory at exit. Defaults to True. \"\"\" # Set paths if self . _use_temp_dir : # Need to attach this to the object. Otherwise it will go out of scope. self . _tempdir = tempfile . TemporaryDirectory ( dir = workdir ) self . _base_path = self . _tempdir . name if cleanup : atexit . register ( self . _cleanup_workdir ) else : # Work in place self . _base_path = self . original_path","title":"setup_workdir()"},{"location":"api/command_wrapper/#lume.base.CommandWrapper.write_input","text":"Write the input parameters into the file. Parameters: Name Type Description Default input_filename str The file in which to write the input parameters required Source code in lume/base.py @abstractmethod def write_input ( self , input_filename ): \"\"\" Write the input parameters into the file. Parameters ---------- input_filename : str The file in which to write the input parameters \"\"\" raise NotImplementedError","title":"write_input()"},{"location":"api/tools/","text":"lume.tools.tools NpEncoder ( JSONEncoder ) Custom encoder to serialize Numpy data types. StackOverflow reference Source code in lume/tools.py class NpEncoder ( json . JSONEncoder ): \"\"\" Custom encoder to serialize Numpy data types. [StackOverflow reference](https://stackoverflow.com/q/50916422) \"\"\" def default ( self , obj ): \"\"\" \"\"\" if isinstance ( obj , np . integer ): return int ( obj ) elif isinstance ( obj , np . floating ): return float ( obj ) elif isinstance ( obj , np . ndarray ): return obj . tolist () else : return super ( NpEncoder , self ) . default ( obj ) default ( self , obj ) Source code in lume/tools.py def default ( self , obj ): \"\"\" \"\"\" if isinstance ( obj , np . integer ): return int ( obj ) elif isinstance ( obj , np . floating ): return float ( obj ) elif isinstance ( obj , np . ndarray ): return obj . tolist () else : return super ( NpEncoder , self ) . default ( obj ) fingerprint ( keyed_data , digest_size = 16 ) Creates a cryptographic fingerprint from keyed data. Used JSON dumps to form strings, and the blake2b algorithm to hash. Parameters: Name Type Description Default keyed_data dict dict with the keys to generate a fingerprint required digest_size int Digest size for blake2b hash code, by default 16 16 Returns: Type Description str The hexadecimal digest Source code in lume/tools.py def fingerprint ( keyed_data , digest_size = 16 ): \"\"\" Creates a cryptographic fingerprint from keyed data. Used JSON dumps to form strings, and the blake2b algorithm to hash. Parameters ---------- keyed_data : dict dict with the keys to generate a fingerprint digest_size : int, optional Digest size for blake2b hash code, by default 16 Returns ------- str The hexadecimal digest \"\"\" h = hashlib . blake2b ( digest_size = digest_size ) for key in sorted ( keyed_data . keys ()): val = keyed_data [ key ] s = json . dumps ( val , sort_keys = True , cls = NpEncoder ) . encode () h . update ( s ) return h . hexdigest () full_path ( path ) Helper function to expand enviromental variables and return the absolute path Parameters: Name Type Description Default path str A path possibly containing environment variables and user (~) shortcut required Returns: Type Description str The expanded absolute path Source code in lume/tools.py def full_path ( path ): \"\"\" Helper function to expand enviromental variables and return the absolute path Parameters ---------- path : str A path possibly containing environment variables and user (~) shortcut Returns ------- str The expanded absolute path \"\"\" return os . path . abspath ( os . path . expanduser ( os . path . expandvars ( path )))","title":"Tools"},{"location":"api/tools/#lume.tools.tools","text":"","title":"tools"},{"location":"api/tools/#lume.tools.tools.NpEncoder","text":"Custom encoder to serialize Numpy data types. StackOverflow reference Source code in lume/tools.py class NpEncoder ( json . JSONEncoder ): \"\"\" Custom encoder to serialize Numpy data types. [StackOverflow reference](https://stackoverflow.com/q/50916422) \"\"\" def default ( self , obj ): \"\"\" \"\"\" if isinstance ( obj , np . integer ): return int ( obj ) elif isinstance ( obj , np . floating ): return float ( obj ) elif isinstance ( obj , np . ndarray ): return obj . tolist () else : return super ( NpEncoder , self ) . default ( obj )","title":"NpEncoder"},{"location":"api/tools/#lume.tools.tools.NpEncoder.default","text":"Source code in lume/tools.py def default ( self , obj ): \"\"\" \"\"\" if isinstance ( obj , np . integer ): return int ( obj ) elif isinstance ( obj , np . floating ): return float ( obj ) elif isinstance ( obj , np . ndarray ): return obj . tolist () else : return super ( NpEncoder , self ) . default ( obj )","title":"default()"},{"location":"api/tools/#lume.tools.tools.fingerprint","text":"Creates a cryptographic fingerprint from keyed data. Used JSON dumps to form strings, and the blake2b algorithm to hash. Parameters: Name Type Description Default keyed_data dict dict with the keys to generate a fingerprint required digest_size int Digest size for blake2b hash code, by default 16 16 Returns: Type Description str The hexadecimal digest Source code in lume/tools.py def fingerprint ( keyed_data , digest_size = 16 ): \"\"\" Creates a cryptographic fingerprint from keyed data. Used JSON dumps to form strings, and the blake2b algorithm to hash. Parameters ---------- keyed_data : dict dict with the keys to generate a fingerprint digest_size : int, optional Digest size for blake2b hash code, by default 16 Returns ------- str The hexadecimal digest \"\"\" h = hashlib . blake2b ( digest_size = digest_size ) for key in sorted ( keyed_data . keys ()): val = keyed_data [ key ] s = json . dumps ( val , sort_keys = True , cls = NpEncoder ) . encode () h . update ( s ) return h . hexdigest ()","title":"fingerprint()"},{"location":"api/tools/#lume.tools.tools.full_path","text":"Helper function to expand enviromental variables and return the absolute path Parameters: Name Type Description Default path str A path possibly containing environment variables and user (~) shortcut required Returns: Type Description str The expanded absolute path Source code in lume/tools.py def full_path ( path ): \"\"\" Helper function to expand enviromental variables and return the absolute path Parameters ---------- path : str A path possibly containing environment variables and user (~) shortcut Returns ------- str The expanded absolute path \"\"\" return os . path . abspath ( os . path . expanduser ( os . path . expandvars ( path )))","title":"full_path()"}]}